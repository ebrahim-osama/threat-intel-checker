<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Threat Intel Checker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
        }
        .loading-spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left-color: #3b82f6;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
            display: inline-block;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .fade-in {
            animation: fadeIn 0.3s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="min-h-screen flex flex-col">
        <!-- Header -->
        <header class="bg-slate-800 text-white shadow-lg">
            <div class="container mx-auto px-4 py-3 flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                    </svg>
                    <h1 class="text-xl font-bold">Threat Intel Checker</h1>
                </div>
                <div class="flex space-x-4">
                    <button id="checkTabBtn" class="px-4 py-2 bg-blue-500 text-white rounded-md">Check Threats</button>
                    <button id="addTabBtn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md">Add Threat</button>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="flex-grow container mx-auto px-4 py-6">
            <!-- Error Box -->
            <div id="errorBox" class="hidden mb-4 p-3 rounded bg-red-100 text-red-700 border border-red-300"></div>
            
            <!-- Success Box -->
            <div id="successBox" class="hidden mb-4 p-3 rounded bg-green-100 text-green-700 border border-green-300"></div>

            <!-- Check Threats Tab Content -->
            <div id="checkContent" class="tab-content">
                <div class="bg-white shadow-md rounded-lg p-6 mb-6">
                    <h2 class="text-lg font-semibold mb-4">Threat Check</h2>
                    
                    <div class="mb-6">
                        <div class="flex space-x-4 mb-4">
                            <button id="checkTypeFile" class="check-type-btn px-4 py-2 bg-blue-500 text-white rounded-md">File Hash</button>
                            <button id="checkTypeIP" class="check-type-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-md">IP Address</button>
                            <button id="checkTypeURL" class="check-type-btn px-4 py-2 bg-gray-200 text-gray-700 rounded-md">URL</button>
                        </div>
                        
                        <!-- File Hash Check Form -->
                        <div id="fileHashForm" class="check-form">
                            <div class="mb-4">
                                <label for="fileHash" class="block text-sm font-medium text-gray-700 mb-1">Enter File Hash (MD5, SHA-1, SHA-256)</label>
                                <input type="text" id="fileHash" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., 44d88612fea8a8f36de82e1278abb02f">
                            </div>
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Or Upload File to Calculate Hash</label>
                                <input type="file" id="fileUpload" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                            </div>
                            <div class="flex justify-end">
                                <button id="checkFileBtn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Check File</button>
                            </div>
                        </div>
                        
                        <!-- IP Check Form -->
                        <div id="ipForm" class="check-form hidden">
                            <div class="mb-4">
                                <label for="ipAddress" class="block text-sm font-medium text-gray-700 mb-1">Enter IP Address</label>
                                <input type="text" id="ipAddress" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., 192.168.1.1">
                            </div>
                            <div class="flex justify-end">
                                <button id="checkIPBtn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Check IP</button>
                            </div>
                        </div>
                        
                        <!-- URL Check Form -->
                        <div id="urlForm" class="check-form hidden">
                            <div class="mb-4">
                                <label for="urlAddress" class="block text-sm font-medium text-gray-700 mb-1">Enter URL</label>
                                <input type="text" id="urlAddress" class="w-full px-3 py-2 border border-gray-300 rounded-md" placeholder="e.g., https://example.com">
                            </div>
                            <div class="flex justify-end">
                                <button id="checkURLBtn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Check URL</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Results Section -->
                <div id="resultsSection" class="bg-white shadow-md rounded-lg p-6 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-semibold">Threat Analysis Results</h2>
                        <button id="closeResults" class="text-gray-500 hover:text-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                    
                    <div id="threatStatus" class="mb-6 p-4 rounded-md">
                        <!-- Will be filled dynamically from backend response -->
                    </div>
                    
                    <div class="mb-4">
                        <h3 class="text-md font-medium mb-2">Details</h3>
                        <div id="threatDetails" class="border border-gray-200 rounded-md p-4 bg-gray-50">
                            <!-- Will be filled dynamically from backend response -->
                        </div>
                    </div>
                    
                    <div id="virusTotalSection" class="mb-4 hidden">
                        <h3 class="text-md font-medium mb-2">VirusTotal Results</h3>
                        <div id="virusTotalDetails" class="border border-gray-200 rounded-md p-4 bg-gray-50">
                            <!-- Will be filled dynamically from backend response -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add Threat Tab Content -->
            <div id="addContent" class="tab-content hidden">
                <div class="bg-white shadow-md rounded-lg p-6">
                    <h2 class="text-lg font-semibold mb-4">Add New Threat</h2>
                    <form id="addThreatForm" class="space-y-4">
                        <div>
                            <label for="threatType" class="block text-sm font-medium text-gray-700 mb-1">Threat Type</label>
                            <select id="threatType" name="type" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                                <option value="hash">File Hash</option>
                                <option value="ip">IP Address</option>
                                <option value="url">URL</option>
                            </select>
                        </div>

                        <div>
                            <label for="threatValue" class="block text-sm font-medium text-gray-700 mb-1">Value</label>
                            <input type="text" id="threatValue" name="value" class="w-full px-3 py-2 border border-gray-300 rounded-md" required
                                placeholder="Enter hash, IP address, or URL">
                        </div>

                        <div>
                            <label for="threatLevel" class="block text-sm font-medium text-gray-700 mb-1">Threat Level</label>
                            <select id="threatLevel" name="threatLevel" class="w-full px-3 py-2 border border-gray-300 rounded-md" required>
                                <option value="low">Low</option>
                                <option value="medium">Medium</option>
                                <option value="high">High</option>
                                <option value="critical">Critical</option>
                            </select>
                        </div>

                        <div>
                            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <textarea id="description" name="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md" required
                                placeholder="Enter threat description"></textarea>
                        </div>

                        <div class="flex justify-end">
                            <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                                Add Threat
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </main>

        <!-- Footer -->
        <footer class="bg-slate-800 text-white py-4">
            <div class="container mx-auto px-4 text-center">
                <p>Threat Intel Checker &copy; 2025</p>
            </div>
        </footer>
    </div>

    <script>
        // API Configuration
        const API_BASE_URL = '/api';
        
        // DOM Elements
        const checkTypeFile = document.getElementById('checkTypeFile');
        const checkTypeIP = document.getElementById('checkTypeIP');
        const checkTypeURL = document.getElementById('checkTypeURL');
        
        const fileHashForm = document.getElementById('fileHashForm');
        const ipForm = document.getElementById('ipForm');
        const urlForm = document.getElementById('urlForm');
        
        const checkFileBtn = document.getElementById('checkFileBtn');
        const checkIPBtn = document.getElementById('checkIPBtn');
        const checkURLBtn = document.getElementById('checkURLBtn');
        
        const resultsSection = document.getElementById('resultsSection');
        const closeResults = document.getElementById('closeResults');
        const threatStatus = document.getElementById('threatStatus');
        const threatDetails = document.getElementById('threatDetails');
        const virusTotalSection = document.getElementById('virusTotalSection');
        const virusTotalDetails = document.getElementById('virusTotalDetails');
        const errorBox = document.getElementById('errorBox');
        
        // Tab Switching
        const checkTabBtn = document.getElementById('checkTabBtn');
        const addTabBtn = document.getElementById('addTabBtn');
        const checkContent = document.getElementById('checkContent');
        const addContent = document.getElementById('addContent');
        const successBox = document.getElementById('successBox');

        checkTabBtn.addEventListener('click', () => {
            checkTabBtn.classList.remove('bg-gray-200', 'text-gray-700');
            checkTabBtn.classList.add('bg-blue-500', 'text-white');
            addTabBtn.classList.remove('bg-blue-500', 'text-white');
            addTabBtn.classList.add('bg-gray-200', 'text-gray-700');
            checkContent.classList.remove('hidden');
            addContent.classList.add('hidden');
            clearError();
            successBox.classList.add('hidden');
        });

        addTabBtn.addEventListener('click', () => {
            addTabBtn.classList.remove('bg-gray-200', 'text-gray-700');
            addTabBtn.classList.add('bg-blue-500', 'text-white');
            checkTabBtn.classList.remove('bg-blue-500', 'text-white');
            checkTabBtn.classList.add('bg-gray-200', 'text-gray-700');
            addContent.classList.remove('hidden');
            checkContent.classList.add('hidden');
            clearError();
            successBox.classList.add('hidden');
        });
        
        // Helper function for API calls
        async function apiCall(endpoint, method = 'GET', data = null) {
            const headers = {
                'Content-Type': 'application/json'
            };
            
            const options = {
                method,
                headers
            };
            
            if (data && (method === 'POST' || method === 'PUT')) {
                options.body = JSON.stringify(data);
            }

            // Hide error box before new request
            errorBox.classList.add('hidden');

            try {
                const response = await fetch(`${API_BASE_URL}${endpoint}`, options);
                const result = await response.json();
                
                if (!response.ok) {
                    // Show backend error message if available
                    const errorMsg = result.error || result.message || 'API request failed';
                    showError(errorMsg);
                    throw new Error(errorMsg);
                }
                
                return result;
            } catch (error) {
                showError(error.message);
                return null;
            }
        }

        // Helper to show error
        function showError(msg) {
            errorBox.textContent = msg;
            errorBox.classList.remove('hidden');
        }
        // Helper to clear error
        function clearError() {
            errorBox.classList.add('hidden');
        }
        
        // Check Type Switching
        checkTypeFile.addEventListener('click', () => {
            setActiveCheckType('file');
        });
        
        checkTypeIP.addEventListener('click', () => {
            setActiveCheckType('ip');
        });
        
        checkTypeURL.addEventListener('click', () => {
            setActiveCheckType('url');
        });
        
        function setActiveCheckType(type) {
            clearError();
            // Reset all buttons
            [checkTypeFile, checkTypeIP, checkTypeURL].forEach(b => {
                b.classList.remove('bg-blue-500', 'text-white');
                b.classList.add('bg-gray-200', 'text-gray-700');
            });
            
            // Reset all forms
            [fileHashForm, ipForm, urlForm].forEach(f => {
                f.classList.add('hidden');
            });
            
            // Set active type
            if (type === 'file') {
                checkTypeFile.classList.remove('bg-gray-200', 'text-gray-700');
                checkTypeFile.classList.add('bg-blue-500', 'text-white');
                fileHashForm.classList.remove('hidden');
            } else if (type === 'ip') {
                checkTypeIP.classList.remove('bg-gray-200', 'text-gray-700');
                checkTypeIP.classList.add('bg-blue-500', 'text-white');
                ipForm.classList.remove('hidden');
            } else if (type === 'url') {
                checkTypeURL.classList.remove('bg-gray-200', 'text-gray-700');
                checkTypeURL.classList.add('bg-blue-500', 'text-white');
                urlForm.classList.remove('hidden');
            }
        }
        
        // Check Functionality
        checkFileBtn.addEventListener('click', async () => {
            const fileHash = document.getElementById('fileHash').value;
            
            if (!fileHash) {
                showError('Please enter a file hash');
                return;
            }
            
            // Show loading state
            checkFileBtn.innerHTML = '<span class="loading-spinner mr-2"></span> Checking...';
            checkFileBtn.disabled = true;
            
            try {
                // Call API to check file hash
                const response = await apiCall(`/check/file?hash=${encodeURIComponent(fileHash)}&virustotal=true`, 'GET');
                
                if (response) {
                    displayResults(response);
                }
            } catch (error) {
                console.error('File Check Error:', error);
            } finally {
                // Reset button
                checkFileBtn.innerHTML = 'Check File';
                checkFileBtn.disabled = false;
            }
        });
        
        checkIPBtn.addEventListener('click', async () => {
            const ipAddress = document.getElementById('ipAddress').value;
            
            if (!ipAddress) {
                showError('Please enter an IP address');
                return;
            }
            
            // Show loading state
            checkIPBtn.innerHTML = '<span class="loading-spinner mr-2"></span> Checking...';
            checkIPBtn.disabled = true;
            
            try {
                // Call API to check IP
                const response = await apiCall(`/check/ip?address=${encodeURIComponent(ipAddress)}&virustotal=true`, 'GET');
                
                if (response) {
                    displayResults(response);
                }
            } catch (error) {
                console.error('IP Check Error:', error);
            } finally {
                // Reset button
                checkIPBtn.innerHTML = 'Check IP';
                checkIPBtn.disabled = false;
            }
        });
        
        checkURLBtn.addEventListener('click', async () => {
            const urlAddress = document.getElementById('urlAddress').value;
            
            if (!urlAddress) {
                showError('Please enter a URL');
                return;
            }
            
            // Show loading state
            checkURLBtn.innerHTML = '<span class="loading-spinner mr-2"></span> Checking...';
            checkURLBtn.disabled = true;
            
            try {
                // Call API to check URL
                const response = await apiCall(`/check/url?address=${encodeURIComponent(urlAddress)}&virustotal=true`, 'GET');
                
                if (response) {
                    displayResults(response);
                }
            } catch (error) {
                console.error('URL Check Error:', error);
            } finally {
                // Reset button
                checkURLBtn.innerHTML = 'Check URL';
                checkURLBtn.disabled = false;
            }
        });
        
        function displayResults(data) {
            // Set status styling based on result from backend
            const status = data.status.toLowerCase();
            
            if (status === 'clean') {
                threatStatus.className = 'mb-6 p-4 rounded-md bg-green-100 border border-green-200';
                threatStatus.innerHTML = `
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                        <span class="font-medium text-green-800">Clean: No threats detected</span>
                    </div>
                `;
            } else if (status === 'suspicious') {
                threatStatus.className = 'mb-6 p-4 rounded-md bg-yellow-100 border border-yellow-200';
                threatStatus.innerHTML = `
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                        <span class="font-medium text-yellow-800">Suspicious: Potential threat detected</span>
                    </div>
                `;
            } else {
                threatStatus.className = 'mb-6 p-4 rounded-md bg-red-100 border border-red-200';
                threatStatus.innerHTML = `
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span class="font-medium text-red-800">Malicious: Threat detected</span>
                    </div>
                `;
            }
            
            // Set details from backend response
            let detailsHTML = '';
            const details = data.details || {};
            
            // Add source information only if there's a threat
            if (data.status.toLowerCase() !== 'clean') {
                // Check if the threat was found in local database or VirusTotal
                const source = details.source || (details.virustotal ? 'virustotal' : 'local_database');
                detailsHTML += `<p class="mb-2"><strong>Source:</strong> ${source === 'local_database' ? 'Local Database' : 'VirusTotal'}</p>`;
            }
            
            // Generate HTML based on the details object
            for (const [key, value] of Object.entries(details)) {
                // Skip the virustotal flag and source as we've already used them for source display
                if (key === 'virustotal' || key === 'source') continue;
                
                const formattedKey = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
                detailsHTML += `<p><strong>${formattedKey}:</strong> ${value}</p>`;
            }
            
            threatDetails.innerHTML = detailsHTML;
            
            // Handle VirusTotal section
            if (data.virusTotal && data.virusTotal.data && data.virusTotal.data.attributes) {
                // Only show VirusTotal section if the threat is from VirusTotal
                const shouldShowVirusTotal = details.source === 'virustotal';
                
                if (shouldShowVirusTotal) {
                    virusTotalSection.classList.remove('hidden');
                    const vtAttributes = data.virusTotal.data.attributes;
                    let vtHTML = '<p class="mb-2 text-sm text-gray-600">Data from VirusTotal API</p>';
                    
                    // Display analysis stats if available
                    if (vtAttributes.last_analysis_stats) {
                        const stats = vtAttributes.last_analysis_stats;
                        vtHTML += `
                            <div class="mb-4">
                                <h4 class="font-medium mb-2">Analysis Results</h4>
                                <div class="grid grid-cols-2 gap-2">
                                    <div class="bg-gray-50 p-2 rounded">
                                        <span class="text-red-600 font-medium">${stats.malicious || 0}</span> Malicious
                                    </div>
                                    <div class="bg-gray-50 p-2 rounded">
                                        <span class="text-yellow-600 font-medium">${stats.suspicious || 0}</span> Suspicious
                                    </div>
                                    <div class="bg-gray-50 p-2 rounded">
                                        <span class="text-green-600 font-medium">${stats.undetected || 0}</span> Undetected
                                    </div>
                                    <div class="bg-gray-50 p-2 rounded">
                                        <span class="text-blue-600 font-medium">${stats.timeout || 0}</span> Timeout
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                    
                    // Display additional attributes
                    if (vtAttributes.popular_threat_names) {
                        vtHTML += `
                            <div class="mb-4">
                                <h4 class="font-medium mb-2">Threat Names</h4>
                                <div class="bg-gray-50 p-2 rounded">
                                    ${vtAttributes.popular_threat_names.join(', ')}
                                </div>
                            </div>
                        `;
                    }
                    
                    // Add link to full report and add to database button
                    if (data.virusTotal && data.virusTotal.data && data.virusTotal.data.id) {
                        const resourceId = data.virusTotal.data.id;
                        let reportUrl;
                        
                        // Construct the correct URL based on resource type
                        if (data.virusTotal.data.type === 'file') {
                            reportUrl = `https://www.virustotal.com/gui/file/${resourceId}`;
                        } else if (data.virusTotal.data.type === 'ip_address') {
                            reportUrl = `https://www.virustotal.com/gui/ip-address/${resourceId}`;
                        } else if (data.virusTotal.data.type === 'url') {
                            reportUrl = `https://www.virustotal.com/gui/url/${resourceId}`;
                        }
                        
                        if (reportUrl) {
                            vtHTML += `
                                <div class="mt-4 flex space-x-4">
                                    <a href="${reportUrl}" target="_blank" class="text-blue-600 hover:text-blue-800 underline">
                                        View Full Report on VirusTotal
                                    </a>
                                    ${details.source !== 'local_database' ? `
                                        <button id="addToDatabaseBtn" class="text-green-600 hover:text-green-800 underline">
                                            Add to Local Database
                                        </button>
                                    ` : ''}
                                </div>
                            `;
                        }
                    }
                    
                    virusTotalDetails.innerHTML = vtHTML;

                    // Add event listener for the "Add to Database" button if it exists
                    const addToDatabaseBtn = document.getElementById('addToDatabaseBtn');
                    if (addToDatabaseBtn) {
                        addToDatabaseBtn.addEventListener('click', async () => {
                            try {
                                // Determine threat level based on VirusTotal stats
                                const stats = data.virusTotal.data.attributes.last_analysis_stats;
                                let threatLevel = 'low';
                                if (stats.malicious > 5) {
                                    threatLevel = 'critical';
                                } else if (stats.malicious > 2) {
                                    threatLevel = 'high';
                                } else if (stats.malicious > 0 || stats.suspicious > 0) {
                                    threatLevel = 'medium';
                                }

                                // Get the original value based on the type
                                let value;
                                if (data.virusTotal.data.type === 'file') {
                                    value = data.virusTotal.data.attributes.sha256 || data.virusTotal.data.attributes.sha1 || data.virusTotal.data.attributes.md5;
                                } else if (data.virusTotal.data.type === 'ip_address') {
                                    value = data.virusTotal.data.id;
                                } else if (data.virusTotal.data.type === 'url') {
                                    value = data.virusTotal.data.attributes.url || data.virusTotal.data.id;
                                }

                                if (!value) {
                                    showError('Could not determine the correct value to save');
                                    return;
                                }

                                // Prepare threat data
                                const threatData = {
                                    type: data.virusTotal.data.type === 'ip_address' ? 'ip' : 
                                          data.virusTotal.data.type === 'file' ? 'hash' : 'url',
                                    value: value,
                                    threatLevel: threatLevel,
                                    description: `Added from VirusTotal. Malicious: ${stats.malicious}, Suspicious: ${stats.suspicious}`
                                };

                                console.log('Sending threat data:', threatData); // Debug log

                                // Add to database
                                const response = await fetch('/api/database/add', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify(threatData)
                                });

                                const result = await response.json();
                                console.log('Server response:', result); // Debug log

                                if (!response.ok) {
                                    if (response.status === 409) {
                                        // Entry already exists
                                        showError(result.error || 'This entry already exists in the database');
                                        addToDatabaseBtn.disabled = true;
                                        addToDatabaseBtn.textContent = 'Already in Database';
                                        addToDatabaseBtn.classList.remove('text-green-600', 'hover:text-green-800');
                                        addToDatabaseBtn.classList.add('text-gray-500');
                                    } else {
                                        throw new Error(result.error || 'Failed to add threat to database');
                                    }
                                    return;
                                }

                                showSuccess('Threat added to local database successfully!');
                                addToDatabaseBtn.disabled = true;
                                addToDatabaseBtn.textContent = 'Added to Database';
                                addToDatabaseBtn.classList.remove('text-green-600', 'hover:text-green-800');
                                addToDatabaseBtn.classList.add('text-gray-500');
                            } catch (error) {
                                showError(error.message);
                            }
                        });
                    }
                } else {
                    virusTotalSection.classList.add('hidden');
                }
            } else {
                virusTotalSection.classList.add('hidden');
            }
            
            // Show results section
            resultsSection.classList.remove('hidden');
            
            // Scroll to results
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }
        
        closeResults.addEventListener('click', () => {
            resultsSection.classList.add('hidden');
        });
        
        // File upload hash calculation
        document.getElementById('fileUpload').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            // Show loading message
            document.getElementById('fileHash').value = 'Calculating hash...';
            
            // In a real app, we would calculate the hash on the client side or upload to backend
            // For now, we'll simulate a file upload to backend for hash calculation
            const formData = new FormData();
            formData.append('file', file);
            
            fetch(`${API_BASE_URL}/check/calculate-hash`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.hash) {
                    document.getElementById('fileHash').value = data.hash;
                } else {
                    document.getElementById('fileHash').value = '';
                    showError('Error calculating hash');
                }
            })
            .catch(error => {
                console.error('Hash Calculation Error:', error);
                document.getElementById('fileHash').value = '';
                showError('Error calculating hash');
            });
        });

        // Add Threat Form Handling
        const addThreatForm = document.getElementById('addThreatForm');

        function showSuccess(msg) {
            successBox.textContent = msg;
            successBox.classList.remove('hidden');
            errorBox.classList.add('hidden');
        }

        addThreatForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(addThreatForm);
            const data = {
                type: formData.get('type'),
                value: formData.get('value'),
                threatLevel: formData.get('threatLevel'),
                description: formData.get('description')
            };

            try {
                const response = await fetch('/api/database/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (!response.ok) {
                    throw new Error(result.error || 'Failed to add threat');
                }

                showSuccess('Threat added successfully!');
                addThreatForm.reset();
            } catch (error) {
                showError(error.message);
            }
        });
    </script>
</body>
</html>
